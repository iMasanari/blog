---
import { CollectionEntry, getCollection } from 'astro:content'
import { tw } from 'tw-tag'
import Tags from '../../components/Tags.astro'
import { SITE_NAME, SUGGEST_LIMIT } from '../../constants'
import Layout from '../../features/Layout/Layout.astro'
import { components } from '../../features/Markdown'
import PostCard from '../../features/PostCard/PostCard.astro'

export const getStaticPaths = async () => {
  const posts = (await getCollection('posts')).sort(
    (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
  )

  return posts.map((post) => {
    const sameTags = posts
      .filter(
        (v) =>
          v.slug !== post.slug &&
          v.data.tags.some((tag) => post.data.tags.includes(tag))
      )
      .slice(0, SUGGEST_LIMIT)

    return { params: { slug: post.slug }, props: { post, sameTags } }
  })
}

interface Props {
  post: CollectionEntry<'posts'>
  sameTags: CollectionEntry<'posts'>[]
}

const { post, sameTags } = Astro.props
const { Content } = await post.render()

const mainStyle = tw(`
  max-w-5xl
  px-2
  mt-4
  mx-auto
`)

const sameTagsStyle = tw(`
  max-w-5xl
  px-2
  mt-8
  mx-auto
`)

const sameTagsTitleStyle = tw(`
  pl-3
  mt-12
  mb-4
  border-l-4
  border-slate-700
  text-2xl
  font-bold
`)
---

<Layout
  title={`${post.data.title} | ${SITE_NAME}`}
  description={post.data.description}
>
  <main class={mainStyle}>
    <article>
      <PostCard post={post.data}>
        <div class={tw(`mt-8`)}>
          <Content components={components} />
        </div>
      </PostCard>
    </article>
  </main>
  {
    sameTags.length > 0 && (
      <aside class={sameTagsStyle}>
        <h2 class={sameTagsTitleStyle}>同じタグを含む記事</h2>
        <Tags tags={post.data.tags} />
        <ul class={tw(`-my-4`)}>
          {sameTags.map((post) => (
            <li class={tw(`my-8`)}>
              <PostCard link={`/posts/${post.slug}/`} post={post.data} />
            </li>
          ))}
        </ul>
      </aside>
    )
  }
</Layout>
