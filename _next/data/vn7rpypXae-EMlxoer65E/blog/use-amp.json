{"pageProps":{"post":{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z","body":"<p>実質、各ページコンポーネントに <code>export const config = { amp: &#x27;hybrid&#x27; }</code> を追加しただけ。<br/>\nNext.js超ラク。</p><h2 id=\"ampとは\">AMPとは</h2><blockquote><p>Accelerated Mobile Pages (AMP) は、Googleが中心となって立ち上げた、モバイルでのウェブサイト閲覧を高速化することを目的とするオープンソースプロジェクトである。また、AMPの成果物である一連の仕様やライブラリなどについてもAMPと呼ぶ。AMPは、従来より用いられているHTMLなどのウェブ技術を改良したもので、中核となるのはAMP HTMLと呼ばれるHTMLの一種である。</p></blockquote><p>らしいです。Wikipadiaより引用。</p><p>ページの表示が遅くなる書き方を禁止するため、HTMLの書き方が制限されますが、代わりにAMPが用意したコンポーネントを使用できます。そして、AMPのルールに沿って書くことで、モバイル時にGoogle検索からページに入るときなどにAMP Cacheと呼ばれる専用のCDNから配信されるというメリットがあります。</p><h2 id=\"やったこと\">やったこと</h2><h3 id=\"amp設定の追加\">AMP設定の追加</h3><p>上記の通り、下記を追加しました。</p><pre><code class=\"language-jsx\" data-language=\"jsx\" data-highlighted-line-numbers=\"\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> amp<span class=\"token operator\">:</span> <span class=\"token string\">'hybrid'</span> <span class=\"token punctuation\">}</span>\n</code></pre><p>上記の設定を追加することで、<code>next export</code> 時に下記のようにファイルが出力されます。</p><pre><code class=\"language-bash\" data-language=\"bash\" data-highlighted-line-numbers=\"\">$ tree out/blog\nout/blog\n├── deploy-to-github-pages-user-page\n│   └── index.html\n├── deploy-to-github-pages-user-page.amp\n│   └── index.html\n├── difference-between-jsx-and-html\n│   └── index.html\n├── difference-between-jsx-and-html.amp\n│   └── index.html\n├── environment-construction\n│   └── index.html\n├── environment-construction.amp\n│   └── index.html\n<span class=\"token punctuation\">..</span>.\n</code></pre><p>AMP時は <code>{slug}.amp/index.html</code> に、非AMP時は <code>{slug}/index.html</code> が使用されます。</p><h3 id=\"グローバルcssの読み込み方法の変更\">グローバルCSSの読み込み方法の変更</h3><p>グローバルCSSをWebpackの <code>import</code> 経由ではなく、styled-jsx + postcss-importで読み込むように変更しました。Webpackの <code>import</code> だと、AMP時にうまく読み込まれないようです。</p><p>参考： <a href=\"https://github.com/vercel/next.js/issues/7121\">AMP: styles missing when importing standard css files in a project using styled components #7121</a></p><pre><code class=\"language-diff\" data-language=\"diff\" data-highlighted-line-numbers=\"\">// src/pages/_app.tsx\n\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">import 'mvp.css'\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">import 'prismjs/themes/prism-okaidia.css'\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// ...\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">&lt;style jsx global>{`\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">  @import 'mvp.css';\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">  @import 'prismjs/themes/prism-okaidia.css';\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">  /* ... */\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">`}&lt;/style>\n</span></span></code></pre><pre><code class=\"language-diff\" data-language=\"diff\" data-highlighted-line-numbers=\"\">// postcss.config.js\n\nmodule.exports = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> plugins: {\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   'postcss-custom-properties': {},\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   'postcss-import': {},\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> },\n</span></span>}\n</code></pre><h3 id=\"スタイル調整\">スタイル調整</h3><p>各ページのコンポーネントについて、非AMP時は <code>&lt;div id=&quot;__next&quot;&gt;...&lt;/div&gt;</code> の中に展開されますが、AMP時は <code>body</code> 以下に直接展開されます。</p><p>現在このブログで使用しているCSSフレームワークの「mvp.css」に下記のようなスタイルがあったため、AMP時と非AMP時で表示に差異が出ていました。</p><pre><code class=\"language-css\" data-language=\"css\" data-highlighted-line-numbers=\"\"><span class=\"token comment\">/* mvp.css */</span>\n\n<span class=\"token comment\">/* 非AMP時のみ下記が適応されない */</span>\n<span class=\"token selector\">article header, div header, main header</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>非AMP時でも同じ見た目になるよう、下記を追加しました。</p><pre><code class=\"language-diff\" data-language=\"diff\" data-highlighted-line-numbers=\"\">// src/components/organisms/Header.tsx\n\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">&lt;style jsx>{`\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">.Header {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">  padding-top: 0;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">}\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">`}&lt;/style>\n</span></span></code></pre><h2 id=\"やらなかったこと\">やらなかったこと</h2><h3 id=\"amp-componentsの使用\">AMP Componentsの使用</h3><p>画像を使っていなかったので、<code>amp-img</code> すら使っていないです。だからこそ、楽に対応できたというのもあります。<br/>\nAMP時と非AMP時の表示の切り替えなどもありません。</p><h2 id=\"まとめ\">まとめ</h2><p>シンプルなので、簡単にできました、という感じです。<br/>\n画像はそのうち対応したいです。</p>"},"next":null,"prev":{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z"},"sameTags":[{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z"},{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z"},{"title":"ブログをHyperappベースの自作ジェネレータに変更した話","description":"作ったばかりのこのブログだが、Hyperappで動くstaticでSPAなサイトに変更した。React Staticを使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。","slug":"use-hyperapp","tags":["blog","Hyperapp"],"image":"/images/hyperapp.png","date":"2018-07-12T12:45:07.379Z"}]},"__N_SSG":true}