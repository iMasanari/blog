{"pageProps":{"post":{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z","body":"<p>久しぶりの更新。<br/>\nブログの使用技術をReact+Next.jsに変更した。</p><h2 id=\"使用技術\">使用技術</h2><h3 id=\"変更\">変更</h3><ul><li>Hyperapp v1 -&gt; React</li><li>自作フレームワーク？ -&gt; Next.js</li><li>nes.css -&gt; mvp.css</li></ul><h3 id=\"続投\">続投</h3><ul><li>TypeScript</li></ul><h2 id=\"なぜ変えたか\">なぜ変えたか</h2><p>Next.jsがSSGに対応し、<code>getStaticPaths</code>、<code>getStaticProps</code>が気になったため。</p><h2 id=\"なぜgetstaticpaths、getstaticpropsが気になったのか\">なぜ<code>getStaticPaths</code>、<code>getStaticProps</code>が気になったのか</h2><p>以下のメリットがあるため。</p><ul><li>ダイナミックルーティングをコンポーネント側で設定できる</li><li>データの加工処理を事前に行ってくれる</li></ul><h2 id=\"ダイナミックルーティングの設定について\">ダイナミックルーティングの設定について</h2><p>SSGでダイナミックルーティングを行う場合、下記の設定が必要である。</p><ul><li>ダイナミックに生成されるURL</li><li>上記URLで使用するテンプレートと、それに渡すデータ</li></ul><p>たいていのSSGツールの場合、上記は設定ファイルに記述する必要がある。しかし、Next.jsでは、<code>pages</code>ディレクトリ内のコンポーネントに記述する。</p><pre><code class=\"language-jsx\" data-language=\"jsx\" data-highlighted-line-numbers=\"\"><span class=\"token comment\">// 例) pages/blog/[slug].jsx</span>\n\n<span class=\"token comment\">// ダイナミックに生成されるURLの一覧</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticPaths</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contents <span class=\"token operator\">=</span> <span class=\"token function\">getAllPosts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 記事一覧の取得</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> contents<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>v<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> paths<span class=\"token punctuation\">,</span> fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// コンポーネントで使用するデータ</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getStaticProps</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 記事データの取得</span>\n\n  <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 使用するコンポーネント</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>コンポーネントの1つのファイルにまとまるのは便利。</p><p>なお、<code>getStaticPaths</code>、<code>getStaticProps</code>内では、node.jsで実行（ブラウザのAPI利用不可）されるが、importしたアセットはWebpackのローダーが適用される。\nこのブログでは、<code>require.context</code>ですべてのマークダウンファイルを取得し、<code>mdx-loader</code>等でHTML化して読み込んでいる。</p><h2 id=\"最後に\">最後に</h2><p>Gatby.jsというフレームワークを触ったときに、<code>page</code>ディレクトリの自動ルーティングがあるのにダイナミックルーティングの設定は設定ファイルに書かなければいけないことに違和感があった。Next.jsでは、<code>pages</code>ディレクトリ内のコンポーネントのファイルで<code>getStaticPaths</code>、<code>getStaticProps</code>をexportするという方法を採用している。もし、このブログをまた自作フレームワークを採用する場合、ぜひ採用してみたい。</p>"},"next":{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z"},"prev":{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z"},"sameTags":[{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z"},{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z"},{"title":"HTMLでは使えないJSX独自の書き方","description":"HTMLとReact JSXの書き方の違いでハマったポイントをまとめた。","slug":"difference-between-jsx-and-html","tags":["React"],"date":"2018-08-13T14:57:58.277Z"}]},"__N_SSG":true}