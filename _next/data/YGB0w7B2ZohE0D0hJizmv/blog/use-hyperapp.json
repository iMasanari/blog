{"pageProps":{"post":{"title":"ブログをHyperappベースの自作ジェネレータに変更した話","description":"作ったばかりのこのブログだが、Hyperappで動くstaticでSPAなサイトに変更した。React Staticを使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。","slug":"use-hyperapp","tags":["blog","Hyperapp"],"image":"/images/hyperapp.png","date":"2018-07-12T12:45:07.379Z","body":"<h2 id=\"はじめに\">はじめに</h2><p>作ったばかりのこのブログだが、<a href=\"https://github.com/hyperapp/hyperapp\">Hyperapp</a>ベースのstaticでSPAなサイトに変更した。\n<a href=\"https://github.com/nozzle/react-static\">React Static</a>を使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。</p><h2 id=\"なぜ変更したのか\">なぜ変更したのか</h2><ul><li><a href=\"/blog/use-technology/\">ブログで使用した技術</a>の通り<ul><li><a href=\"https://github.com/hyperapp/hyperapp\">Hyperapp</a>があるじゃんとなったのがきっかけ</li></ul></li><li>ブログではstateやactionがページ遷移関係でしか使っていないことに気づいた<ul><li>全て<a href=\"https://github.com/nozzle/react-static\">React Static</a>に隠されている</li></ul></li><li>車輪の再発明が好き</li></ul><h2 id=\"移行について\">移行について</h2><h3 id=\"view部分\">View部分</h3><p>jsxが流用できたのでView部分は楽だった。もともとSFCのみでクラスコンポーネントがほぼない。メインコンテンツである記事はmarkdown管理なので問題なし。</p><pre><code class=\"language-diff\" data-language=\"diff\" data-highlighted-line-numbers=\"\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">import React from 'react'\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">import { Link } from 'react-static'\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">import { h } from 'hyperapp'\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">import { Link } from '@hyperapp/router'\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 中略\n</span></span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">export default withRouteData(\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">  ({ posts }: Props) =>\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">    &lt;div className=\"\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">export default ({ posts }: Props) =>\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">  &lt;div class=\"\">\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">// 後略\n</span></span></code></pre><p>コンポーネントで実際に変更したのはこのくらい。</p><h3 id=\"ビルドスクリプトはなんとかなる\">ビルドスクリプトはなんとかなる</h3><p>なんとかなった。</p><p><code>requireWithRollup</code>関数を作れたのが大きい。</p><pre><code class=\"language-jsx\" data-language=\"jsx\" data-highlighted-line-numbers=\"\"><span class=\"token comment\">// rollupのpluginを適用してrequireできる</span>\n<span class=\"token keyword\">const</span> Template <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requireWithRollup</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/Template.tsx'</span><span class=\"token punctuation\">,</span> rollupConfig<span class=\"token punctuation\">)</span>\n</code></pre><p>実装は<a href=\"https://github.com/iMasanari/imasanari.github.io/blob/9ab02e264623038b6d296fa0b0a6171be93907ee/scripts/requireWithRollup.js\">ここ</a>。rollup.jsが自身の設定ファイルを読み込む方法を参考にした。</p><p>設定ファイルやビルド方法は<a href=\"https://github.com/nozzle/react-static\">React Static</a>を<s>パクった</s>かなり参考にした。</p><h2 id=\"ルーティング、およびページ遷移部分\">ルーティング、およびページ遷移部分</h2><p>ここが一番苦労している。エントリーポイントのindex.tsxがごちゃごちゃしてしまった。書き直すならここ。</p><h2 id=\"未実装部分\">未実装部分</h2><p>ページ遷移周りが適当</p><ul><li>ページプリキャッシュ部分<ul><li>現在はリンククリック時にjson読み込み</li><li>prefetchやpreloadで先読み？　それともServise Workerを使う？</li><li>スクリプトが軽いのでいっそJSで雑に先読みしちゃうのもありかも<ul><li>【追記】この方法で仮実装</li></ul></li></ul></li><li>iPhoneでスワイプして戻るとちらつく<ul><li>前画面のデータをキャッシュしててもダメ</li><li><a href=\"https://github.com/nozzle/react-static\">React Static</a>の時には起こらなかった</li></ul></li></ul><h2 id=\"やるかどうかわからない\">やるかどうかわからない</h2><p>ジェネレータ部分を分離</p>"},"next":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","description":"ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。","slug":"remove-object-key","tags":["JavaScript","Babel","TypeScript"],"date":"2018-07-13T12:47:36.148Z"},"prev":{"title":"React StaticでTypeScriptを使用した時のエラー対処法","description":"static.config.jsのwebpack設定を変更することで起こるエラーの対処法。","slug":"webpacks-rules-in-static-config-js","tags":["ReactStatic","TypeScript","webpack"],"date":"2018-07-03T11:47:13.910Z"},"sameTags":[{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z"},{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z"},{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z"}]},"__N_SSG":true}