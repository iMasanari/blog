{"pageProps":{"post":{"title":"ブログをHyperappベースの自作ジェネレータに変更した話","description":"作ったばかりのこのブログだが、Hyperappで動くstaticでSPAなサイトに変更した。React Staticを使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。","slug":"use-hyperapp","tags":["blog","Hyperapp"],"date":"2018-07-12T12:45:07.379Z","update":null,"image":"/images/hyperapp.png","draft":false},"next":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","description":"ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。","slug":"remove-object-key","tags":["JavaScript","Babel","TypeScript"],"date":"2018-07-13T12:47:36.148Z","update":null,"image":null,"draft":false},"prev":{"title":"React StaticでTypeScriptを使用した時のエラー対処法","description":"static.config.jsのwebpack設定を変更することで起こるエラーの対処法。","slug":"webpacks-rules-in-static-config-js","tags":["ReactStatic","TypeScript","webpack"],"date":"2018-07-03T11:47:13.910Z","update":null,"image":null,"draft":false},"sameTags":[{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z","update":null,"image":null,"draft":false},{"title":"ブログをNext.jsベースに変更した","description":"","slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z","update":null,"image":null,"draft":false},{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z","update":null,"image":null,"draft":false}],"content":"<h2>はじめに</h2>\n<p>作ったばかりのこのブログだが、<a href=\"https://github.com/hyperapp/hyperapp\">Hyperapp</a>ベースのstaticでSPAなサイトに変更した。\n<a href=\"https://github.com/nozzle/react-static\">React Static</a>を使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。</p>\n<h2>なぜ変更したのか</h2>\n<ul>\n<li><a href=\"/blog/use-technology/\">ブログで使用した技術</a>の通り\n<ul>\n<li><a href=\"https://github.com/hyperapp/hyperapp\">Hyperapp</a>があるじゃんとなったのがきっかけ</li>\n</ul>\n</li>\n<li>ブログではstateやactionがページ遷移関係でしか使っていないことに気づいた\n<ul>\n<li>全て<a href=\"https://github.com/nozzle/react-static\">React Static</a>に隠されている</li>\n</ul>\n</li>\n<li>車輪の再発明が好き</li>\n</ul>\n<h2>移行について</h2>\n<h3>View部分</h3>\n<p>jsxが流用できたのでView部分は楽だった。もともとSFCのみでクラスコンポーネントがほぼない。メインコンテンツである記事はmarkdown管理なので問題なし。</p>\n<app-code-wrapper lang=\"diff\" code=\"-import React from &#x27;react&#x27;\n-import { Link } from &#x27;react-static&#x27;\n+import { h } from &#x27;hyperapp&#x27;\n+import { Link } from &#x27;@hyperapp/router&#x27;\n\n // 中略\n\n-export default withRouteData(\n-  ({ posts }: Props) =>\n-    <div className=&#x22;&#x22;>\n+export default ({ posts }: Props) =>\n+  <div class=&#x22;&#x22;>\n\n // 後略\"><pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #CE9178\">-import React from &#39;react&#39;</span></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-import { Link } from &#39;react-static&#39;</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+import { h } from &#39;hyperapp&#39;</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+import { Link } from &#39;@hyperapp/router&#39;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> // 中略</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-export default withRouteData(</span></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-  ({ posts }: Props) =&gt;</span></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-    &lt;div className=&quot;&quot;&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+export default ({ posts }: Props) =&gt;</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+  &lt;div class=&quot;&quot;&gt;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> // 後略</span></span></code></pre></app-code-wrapper>\n<p>コンポーネントで実際に変更したのはこのくらい。</p>\n<h3>ビルドスクリプトはなんとかなる</h3>\n<p>なんとかなった。</p>\n<p><code>requireWithRollup</code>関数を作れたのが大きい。</p>\n<app-code-wrapper lang=\"js\" code=\"// rollupのpluginを適用してrequireできる\nconst Template = await requireWithRollup(&#x27;./src/Template.tsx&#x27;, rollupConfig)\"><pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// rollupのpluginを適用してrequireできる</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">Template</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #C586C0\">await</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">requireWithRollup</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&#39;./src/Template.tsx&#39;</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">rollupConfig</span><span style=\"color: #D4D4D4\">)</span></span></code></pre></app-code-wrapper>\n<p>実装は<a href=\"https://github.com/iMasanari/imasanari.github.io/blob/9ab02e264623038b6d296fa0b0a6171be93907ee/scripts/requireWithRollup.js\">ここ</a>。rollup.jsが自身の設定ファイルを読み込む方法を参考にした。</p>\n<p>設定ファイルやビルド方法は<a href=\"https://github.com/nozzle/react-static\">React Static</a>を<s>パクった</s>かなり参考にした。</p>\n<h2>ルーティング、およびページ遷移部分</h2>\n<p>ここが一番苦労している。エントリーポイントのindex.tsxがごちゃごちゃしてしまった。書き直すならここ。</p>\n<h2>未実装部分</h2>\n<p>ページ遷移周りが適当</p>\n<ul>\n<li>ページプリキャッシュ部分\n<ul>\n<li>現在はリンククリック時にjson読み込み</li>\n<li>prefetchやpreloadで先読み？　それともServise Workerを使う？</li>\n<li>スクリプトが軽いのでいっそJSで雑に先読みしちゃうのもありかも\n<ul>\n<li>【追記】この方法で仮実装</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>iPhoneでスワイプして戻るとちらつく\n<ul>\n<li>前画面のデータをキャッシュしててもダメ</li>\n<li><a href=\"https://github.com/nozzle/react-static\">React Static</a>の時には起こらなかった</li>\n</ul>\n</li>\n</ul>\n<h2>やるかどうかわからない</h2>\n<p>ジェネレータ部分を分離</p>"},"__N_SSG":true}