{"pageProps":{"post":{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","description":"WebAssembly Advent Calendar 2018の20日目の記事。","slug":"wasm-bindgen-with-worker","tags":["Rust","wasm-bindgen","TypeScript","parcel"],"date":"2018-12-20T14:58:37.388Z","update":"2019-04-20T13:15:27.878Z","image":null,"draft":false},"next":{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z","update":null,"image":null,"draft":false},"prev":{"title":"HTMLでは使えないJSX独自の書き方","description":"HTMLとReact JSXの書き方の違いでハマったポイントをまとめた。","slug":"difference-between-jsx-and-html","tags":["React"],"date":"2018-08-13T14:57:58.277Z","update":null,"image":null,"draft":false},"sameTags":[{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z","update":null,"image":null,"draft":false},{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","description":"ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。","slug":"remove-object-key","tags":["JavaScript","Babel","TypeScript"],"date":"2018-07-13T12:47:36.148Z","update":null,"image":null,"draft":false},{"title":"React StaticでTypeScriptを使用した時のエラー対処法","description":"static.config.jsのwebpack設定を変更することで起こるエラーの対処法。","slug":"webpacks-rules-in-static-config-js","tags":["ReactStatic","TypeScript","webpack"],"date":"2018-07-03T11:47:13.910Z","update":null,"image":null,"draft":false}],"content":"<p><a href=\"https://qiita.com/advent-calendar/2018/wasm\">WebAssembly Advent Calendar 2018</a>の20日目の記事。\n※ 2019/4/20: 修正</p>\n<h2>TL;DR</h2>\n<p>parcelのparcel-plugin-wasm.rsプラグインを使用しよう！</p>\n<p>サンプルリポジトリはこちら\n<a href=\"https://github.com/iMasanari/wasm-bindgen-with-worker\">iMasanari/wasm-bindgen-with-worker</a></p>\n<h2>やりたいこと</h2>\n<p>時間のかかる処理をWebAssemblyで高速に行いたい。そのためには、下記の条件が必要になる。</p>\n<ul>\n<li>引数や戻り値をJSON形式でやりとりできること</li>\n<li>非同期処理であること</li>\n</ul>\n<p>今回は、Rustでwasm-bindgenを使用し、WebWorker内で動かす環境を作っていく。</p>\n<h2>1度、WebPackで構築するも……</h2>\n<p>まずは、<a href=\"https://www.mizdra.net/entry/2018/10/17/080000\">WebAssemblyを使って乱数調整ツールをWebに移植した話</a>を元に、WebPackで構築した。しかし、3つの気になる点が出てきた。</p>\n<ul>\n<li>Worker用のエントリーファイルをもう1つ用意しなければならない\n<ul>\n<li><a href=\"https://github.com/webpack/webpack/issues/7647\">Cannot import wasm in web workers #7647</a></li>\n</ul>\n</li>\n<li>中間ファイル生成（Rust→wasm）のせいで、ビルドタスクが煩雑になる</li>\n<li>ライブリロード\n<ul>\n<li>ワンテンポ遅いタイミングでページ全体のリロードがされる</li>\n<li>リロードの読み込み時間も長い</li>\n</ul>\n</li>\n</ul>\n<p>エントリーファイルの問題は、WebWorkerのファイル名にハッシュ（<code>worker.2290ab9e.js</code>の<code>2290ab9e</code>部分）が付けられないことである。今回はスクリプトがView、WebWorker、WASMの3ファイルに分かれるので、キャッシュ対策のためにも必要度は高い。</p>\n<h2>parcelでの環境構築</h2>\n<p>Webpackで環境を作って数日後、ふと別のモジュールバンドラを使用すればよいのではと思い、parcelで試してみた。すると、上記のエントリーファイル問題、中間ファイル問題を解決することができた。\nライブリロードの件は一応差分更新を試みてくれるが、Rustの更新内容は反映されなかった。ただ、普段ライブリロードは使わず、またワンテンポ遅れの全リロードでないためそこまで問題は感じていない。</p>\n<p>なぜ最初にparcelで試さなかったのかというと、情報がWebpackのものしかなかったからだ。なので今回、parcelでWebWorker + WebAssemblyを扱う方法を共有したい。（といっても、parcelがゼロコンフィグなモジュールバンドラのため、そこまで凝ったことはしていない）</p>\n<h2>各種インストール</h2>\n<p>Node.jsやRustはインストール済みとする。</p>\n<p>parcelのインストール</p>\n<p><del>parcel-plugin-wasm.rs v1.2.7はparcel-bundler v1.11.0に対応していないのかビルドエラーになったため、バージョンを指定してインストールしている。</del></p>\n<p>※最新バージョンで治っていることを確認。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ npm install -D parcel-bundler parcel-plugin-wasm.rs</span></span>\n<span class=\"line\"></span></code></pre>\n<p>parcel-plugin-wasm.rsはRustをwasm-packでコンパイルするためのparcelのプラグイン。wasm-packのインストールがまだの場合はインストールする。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ cargo install wasm-pack</span></span>\n<span class=\"line\"></span></code></pre>\n<p>個人的にいつもTypeScriptを使うので、それ関連のインストール。\n<a href=\"https://www.npmjs.com/package/@types/webassembly-js-api\">@types/webassembly-js-api</a>は、WebAssemblyの型定義。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ npm install -D typescript @types/webassembly-js-api</span></span>\n<span class=\"line\"></span></code></pre>\n<h2>フォルダ構成と設定ファイル</h2>\n<h3>フォルダ構成（srcフォルダ）</h3>\n<p>各種フォルダとエントリーポイントのHTMLという構成で、個人的にすごくきれいな配置だと思う。\nちなみにこの出力をするためにMacへTreeコマンドを入れた。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ tree src</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">src</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── app</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.ts</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── wasm</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   ├── lib.rs</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── lib.rs.d.ts</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── worker</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.ts</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">└── index.html</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>各種設定ファイル（必要最低限の箇所のみ）</h3>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// package.json</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">\"scripts\"</span><span style=\"color: #D4D4D4\">: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"dev\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"parcel src/index.html\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"build\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"parcel build src/index.html\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  },</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">\"devDependencies\"</span><span style=\"color: #D4D4D4\">: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"@types/webassembly-js-api\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"0.0.3\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"parcel-bundler\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"^1.12.3\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"parcel-plugin-wasm.rs\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"^1.2.8\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"typescript\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"^3.4.2\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  },</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">\"browserslist\"</span><span style=\"color: #D4D4D4\">: [</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #CE9178\">\"last 2 chrome versions\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  ]</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\"># Cargo.toml</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">[package]</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">name</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"wasm\"</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">version</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"0.1.0\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">[dependencies]</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">wasm-bindgen</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"^0.2\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">[lib]</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">crate-type</span><span style=\"color: #D4D4D4\"> = [</span><span style=\"color: #CE9178\">\"cdylib\"</span><span style=\"color: #D4D4D4\">]</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">path</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #CE9178\">\"./src/wasm/lib.rs\"</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// tsconfig.json</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">\"compilerOptions\"</span><span style=\"color: #D4D4D4\">: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"target\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">\"es2015\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"lib\"</span><span style=\"color: #D4D4D4\">: [</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #CE9178\">\"es2015\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #CE9178\">\"dom\"</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">      </span><span style=\"color: #CE9178\">\"webworker\"</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    ],</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"strict\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">\"esModuleInterop\"</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>WebAssembly未対応のIEを切り捨て、TypeScriptのコンパイルはes2015で行っている。parcelのbabel側でes5に変換されないよう、<code>package.json</code>では<code>browserslist</code>の設定を行う。</p>\n<h2>各ファイル</h2>\n<p>全部書くのも面倒なので、各ファイルのインポート部分だけ書いていく。\n書き足している場所もあるが、全体はサンプルリポジトリを参照。\n<a href=\"https://github.com/iMasanari/wasm-bindgen-with-worker\">iMasanari/wasm-bindgen-with-worker</a></p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">&#x3C;!-- src/index.html --></span></span>\n<span class=\"line\"><span style=\"color: #808080\">&#x3C;</span><span style=\"color: #569CD6\">script</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">src</span><span style=\"color: #D4D4D4\">=</span><span style=\"color: #CE9178\">\"app/index.ts\"</span><span style=\"color: #808080\">>&#x3C;/</span><span style=\"color: #569CD6\">script</span><span style=\"color: #808080\">></span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// src/app/index.ts</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">worker</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #569CD6\">new</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">Worker</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">'../worker/index.ts'</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// src/worker/index.ts</span></span>\n<span class=\"line\"><span style=\"color: #C586C0\">import</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">*</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">as</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">wasm</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #C586C0\">from</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'../wasm/lib.rs'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">// WebAssemblyの実行</span></span>\n<span class=\"line\"><span style=\"color: #9CDCFE\">wasm</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">some_function</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">'WebAssembly'</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<p>あとは、Rustの関数を作るだけ。\n現在のWebAssemblyは数値しかやりとりができないが、wasm-bindgenを使うことで文字列やJSONもやりとりができるようになる。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// src/wasm/lib.rs</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">crate</span><span style=\"color: #D4D4D4\"> wasm_bindgen;</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">use</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4EC9B0\">wasm_bindgen</span><span style=\"color: #D4D4D4\">::</span><span style=\"color: #4EC9B0\">prelude</span><span style=\"color: #D4D4D4\">::*;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">#[wasm_bindgen]</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">pub</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">fn</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">some_function</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">: &#x26;</span><span style=\"color: #4EC9B0\">str</span><span style=\"color: #D4D4D4\">) -> </span><span style=\"color: #4EC9B0\">String</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #DCDCAA\">format!</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">\"Hello, {}!\"</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">input</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>ビルドも下記コマンドだけでOK。\n初回だけ、Rustのビルドに時間がかかる。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\"># デバッグ用ビルド + サーバー</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">$ npm run dev</span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\"># プロダクションビルド</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">$ npm run build</span></span>\n<span class=\"line\"></span></code></pre>\n<p>出力結果はこんな感じ。\nなぜか<code>lib.rs</code>まで出力されているが、ちゃんとハッシュが付いているのが確認できる。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ tree dist</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">dist</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── app.68414551.js</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── lib.3d22fd5b.rs</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── wasm_bg.ead9fc9c.wasm</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">└── worker.135e8d27.js</span></span>\n<span class=\"line\"></span></code></pre>\n<h2>Webpackとの違い</h2>\n<h3>RustからのJavaScriptコード呼び出しパス</h3>\n<p>Webpackでは、pkgフォルダ内のファイルをインポートするため、相対パスの基準は<code>pkg/</code>である。\nparcel(parcel-plugin-wasm.rs)では、<code>node_modules/parcel-plugin-wasm.rs/</code>が基準である。parcelの絶対パス（<code>/*</code>）を使えば、エントリーファイルの場所（今回は<code>src/</code>）が基準になる。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// src/wasm/lib.rs</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">#[wasm_bindgen(module = </span><span style=\"color: #CE9178\">\"/worker/wasm-util\"</span><span style=\"color: #D4D4D4\">)]</span></span>\n<span class=\"line\"><span style=\"color: #569CD6\">extern</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">fn</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">console_log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">s</span><span style=\"color: #D4D4D4\">: &#x26;</span><span style=\"color: #4EC9B0\">str</span><span style=\"color: #D4D4D4\">);</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>WebWorker側でのRustインポート</h3>\n<p>Webpackでは、WASMをインポートするまでに必ずDynamic importを挟む必要がある。\nparcelではその必要がなく、直接importする。（そもそもWebWroker内でのDynamic importがサポートされていない？）</p>\n<p>つまり、parcelではWASMロード中の<code>postMessage</code>を取りこぼしてしまう可能性がある。\nそのため<a href=\"https://github.com/iMasanari/wasm-bindgen-with-worker\">サンプル</a>では、<a href=\"https://github.com/iMasanari/wasm-bindgen-with-worker/blob/master/src/app/wasmWorker.ts#L24\">ロードを待ってからメッセージを送る</a>ようにしている。</p>\n<h2>まとめ</h2>\n<p>parcelを使うことで、簡単にWebAssemblyが始められる。</p>\n<p>ちなみにRustは、C言語並みの処理スピードを持ちながらモダンな文法と強力なコンパイル時チェックを備えている言語でおすすめ！　所有権、借用、ライフタイム？　学習コストが高い？　知らんな。一緒に<a href=\"https://doc.rust-jp.rs/the-rust-programming-language-ja/1.6/book/references-and-borrowing.html#%E6%A6%82%E8%AB%96\">借用チェッカと戦おうぜ！</a> by Rust初心者</p>"},"__N_SSG":true}