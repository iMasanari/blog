{"pageProps":{"post":{"title":"自作ブログのHTMLをminifyした","description":"HTMLはホワイトスペースの問題があり、minifyする、しないの意見が別れるようだ。私は普段、HTMLまでは行わないのだが、今回はhtml-minifierを使用してHTMLを圧縮したのでそのメモを残しておく。","slug":"html-minify","tags":["html-minifier"],"date":"2018-07-29T14:19:54.882Z","update":null,"image":"/images/html-minify.png","draft":false},"next":{"title":"私の必要最低限な環境構築","description":"macOS Mojaveのダークモードに憧れ、Macbookのサブパーテーションにパブリックベータをインストールした。メインのパーテーションに入れるかを検討するため、しばらくはこちらを使用していこうと思う。このパーテーションはHigh Sierraのパブリックベータからのアップデートのため新規インストールではないが、一通り開発できる環境を整え、それをまとめることにする。","slug":"environment-construction","tags":["macOS"],"date":"2018-08-09T15:46:41.052Z","update":"2018-08-31T23:55:19.826Z","image":null,"draft":false},"prev":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","description":"ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。","slug":"remove-object-key","tags":["JavaScript","Babel","TypeScript"],"date":"2018-07-13T12:47:36.148Z","update":null,"image":null,"draft":false},"sameTags":[],"content":"<h2>はじめに</h2>\n<p>HTMLはホワイトスペースの問題があり、minifyする、しないの意見が別れるようだ。私は普段、HTMLまでは行わないのだが、今回は<a href=\"https://github.com/kangax/html-minifier\">html-minifier</a>を使用してHTMLを圧縮したのでそのメモを残しておく。</p>\n<h2>動機</h2>\n<ul>\n<li>markdownの変換するHTMLが気に入らない\n<ul>\n<li>改行はあるがインデントはなく、整形が中途半端</li>\n<li>minifyして綺麗にしよう！</li>\n</ul>\n</li>\n<li>軽量化\n<ul>\n<li>Hyperappにしたので、軽さにはこだわりたい</li>\n</ul>\n</li>\n</ul>\n<h2>設定</h2>\n<p>このブログのHTMLは、Hyperappで生成される部分とmarkdownで生成される部分の2つがある。今回はそれぞれ別の設定でminifyを行った。</p>\n<h3>Hyperapp / HTML</h3>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">minifyCSS</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">minifyJS</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">removeAttributeQuotes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">sortAttributes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">sortClassName</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>この設定は、Hyperappが事前レンダリングで生成したHTMLに対して行うものである。Virtual DOMから生成されるHTMLには不必要な空白はなく、また実際のDOMとズレているとエラーになりうるので破壊的な変更は行っていない。なので、プロダクションビルド時にのみ行っている。</p>\n<p><code>minifyJS</code>は埋め込まれたHyperappの初期state用の設定だ。JSON形式で埋め込まれるため、その余分なクォートを取り除いている。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #CE9178\">-var __data = {\"foo\": \"bar\"}</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+var __data = {foo: \"bar\"}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>markdown / JSON</h3>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">collapseBooleanAttributes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// collapseInlineTagWhitespace: true,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">collapseWhitespace</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">quoteCharacter</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #CE9178\">`'`</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">removeAttributeQuotes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">removeRedundantAttributes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">sortAttributes</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #C8C8C8\">sortClassName</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #569CD6\">true</span><span style=\"color: #D4D4D4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>markdownは、ホワイトスペースの削除など破壊的になりうる設定を取り入れている。これは、Hyperappの<code>innerHTML</code>で入れているためVirtual DOMの管理外であるからだ。こちらは、破壊箇所がないか様子を見るためにプロダクションビルドでない時にもminifyを行っている。（そのうちプロダクションビルド時のみにしたい）</p>\n<p>最初は、細かい作り込みができないmarkdownでは<code>collapseInlineTagWhitespace</code>の影響を受けることはないだろうと有効にしていた。しかし、<code>**foo** **bar**</code>と書いた時に間のスペースが消えることに気づき、またその設定で効果が出るHTMLをmarkdownが生成するとは思えないのでオフにした。</p>\n<p>また、このHTMLはJSONの中にも埋め込まれることから、シングルクォート使用するよう設定した。</p>\n<h2>採用を断念した設定</h2>\n<p>markdownで<code>removeOptionalTags</code>というオプションを使用したかったのだが今回の用法では見送った。これは、省略可能なタグを削除するもので、<code>p</code>や<code>li</code>の終了タグがその対象の1つだ。</p>\n<p>今回の用法では、markdown時、Hyperapp時と2重にminifyされる。1回目の時に<code>removeOptionalTags</code>を有効にすると、2回目の時にHTMLが正しくパースされなかった。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #808080\">&#x3C;</span><span style=\"color: #569CD6\">p</span><span style=\"color: #808080\">></span><span style=\"color: #D4D4D4\">終了タグは省略</span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">&#x3C;!-- 終了タグの正しい場所 --></span></span>\n<span class=\"line\"><span style=\"color: #808080\">&#x3C;</span><span style=\"color: #569CD6\">pre</span><span style=\"color: #808080\">>&#x3C;</span><span style=\"color: #569CD6\">code</span><span style=\"color: #808080\">></span><span style=\"color: #D4D4D4\">/* 別のタグ */</span><span style=\"color: #808080\">&#x3C;/</span><span style=\"color: #569CD6\">code</span><span style=\"color: #808080\">>&#x3C;/</span><span style=\"color: #569CD6\">pre</span><span style=\"color: #808080\">></span></span>\n<span class=\"line\"><span style=\"color: #6A9955\">&#x3C;!-- html-minifierが&#x3C;/p>を挿入した場所 --></span></span>\n<span class=\"line\"><span style=\"color: #808080\">&#x3C;</span><span style=\"color: #569CD6\">p</span><span style=\"color: #808080\">></span><span style=\"color: #D4D4D4\">別のpタグ</span></span>\n<span class=\"line\"></span></code></pre>\n<p>2回目の時にもそのオプションが有効なら間違えて挿入した終了タグも削除された。だが、間違えた状態でminifyされるコードを信頼できないため、<code>removeOptionalTags</code>は行わないことにした。</p>\n<h2>結果</h2>\n<p>1つ前の記事<a href=\"/blog/remove-object-key/\">【ES.next】Objectから任意のキーを削除した新しいObjectを作成する</a>をminifyした。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">設定</th>\n<th align=\"right\">HTML</th>\n<th align=\"right\">JSON</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">HTML minifyなし</td>\n<td align=\"right\">14,170 Byte</td>\n<td align=\"right\">6,275 Byte</td>\n</tr>\n<tr>\n<td align=\"left\"><code>removeOptionalTags</code>なし</td>\n<td align=\"right\">13,872 Byte</td>\n<td align=\"right\">6,088 Byte</td>\n</tr>\n<tr>\n<td align=\"left\"><code>removeOptionalTags</code>あり</td>\n<td align=\"right\">13,722 Byte</td>\n<td align=\"right\">6,037 Byte</td>\n</tr>\n</tbody>\n</table>\n<p><code>removeOptionalTags</code>をありにしても元のHTMLの96.8%程度。インデントなしのHTMLをminifyしてもあまり効果はないようだ。\nまた、<code>removeOptionalTags</code>の有無もあまり差はなかった。箇条書きを多用すればもう少し差が開く可能性はあるが、わざわざ有効にするほどでもなさそう。</p>"},"__N_SSG":true}