{"pageProps":{"post":{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z","update":null,"image":null,"draft":false},"next":{"title":"ブログをNext.jsベースに変更した","description":"","slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z","update":null,"image":null,"draft":false},"prev":{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","description":"WebAssembly Advent Calendar 2018の20日目の記事。","slug":"wasm-bindgen-with-worker","tags":["Rust","wasm-bindgen","TypeScript","parcel"],"date":"2018-12-20T14:58:37.388Z","update":"2019-04-20T13:15:27.878Z","image":null,"draft":false},"sameTags":[{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z","update":null,"image":null,"draft":false},{"title":"ブログをNext.jsベースに変更した","description":"","slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z","update":null,"image":null,"draft":false},{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","description":"WebAssembly Advent Calendar 2018の20日目の記事。","slug":"wasm-bindgen-with-worker","tags":["Rust","wasm-bindgen","TypeScript","parcel"],"date":"2018-12-20T14:58:37.388Z","update":"2019-04-20T13:15:27.878Z","image":null,"draft":false}],"content":"<p><a href=\"/blog/wasm-bindgen-with-worker/\">前回の記事</a>でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。</p>\n<p>理由は以下の2つ。</p>\n<ul>\n<li>フラットなコンパイルが（実験的に）サポートされていたから</li>\n<li>ビルドスクリプトの見直し（分割化）</li>\n</ul>\n<h2>フラットなコンパイル</h2>\n<p>Tree Shakingがサポートされていたため。<code>--experimental-scope-hoisting</code>で有効にできる。\nしかも普段使っているrollup.jsと同じ、フラットなコンパイルである。</p>\n<p>というのも、今までのバンドルでは各ファイルのスコープを保つため、それぞれのファイルを<code>function</code>で囲っていた。</p>\n<app-code-wrapper lang=\"js\" code=\"// フラットでないバンドル結果のイメージ\n(function(){\n  // boostrap code\n  // ...\n})({\n  &#x27;module.js&#x27;: function (export, require) {\n    const add = (a, b) => a + b\n\n    export.add = add\n  },\n  &#x27;main.js&#x27;: function (export, require) {\n    const add = require(&#x27;module.js&#x27;).add\n\n    const result = add(1, 2)\n    console.log(result)\n  }\n});\"><pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// フラットでないバンドル結果のイメージ</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\">(){</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// boostrap code</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// ...</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">})({</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #CE9178\">&#39;module.js&#39;</span><span style=\"color: #9CDCFE\">:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">export</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">require</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\"> = (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">b</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">export</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #9CDCFE\">add</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #9CDCFE\">add</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  },</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #CE9178\">&#39;main.js&#39;</span><span style=\"color: #9CDCFE\">:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\"> (</span><span style=\"color: #9CDCFE\">export</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">require</span><span style=\"color: #D4D4D4\">) {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">add</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">require</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #CE9178\">&#39;module.js&#39;</span><span style=\"color: #D4D4D4\">).</span><span style=\"color: #9CDCFE\">add</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">result</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    </span><span style=\"color: #9CDCFE\">console</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">result</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  }</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">});</span></span></code></pre></app-code-wrapper>\n<p>それが、こうなる。</p>\n<app-code-wrapper lang=\"js\" code=\"// フラットなバンドル結果のイメージ\n(function() {\n  // module.js\n  const add = (a, b) => a + b\n  // main.js\n  const result = add(1, 2)\n  console.log(result)\n})();\"><pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">// フラットなバンドル結果のイメージ</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">(</span><span style=\"color: #569CD6\">function</span><span style=\"color: #D4D4D4\">() {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// module.js</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\"> = (</span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #9CDCFE\">b</span><span style=\"color: #D4D4D4\">) </span><span style=\"color: #569CD6\">=&gt;</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #9CDCFE\">a</span><span style=\"color: #D4D4D4\"> + </span><span style=\"color: #9CDCFE\">b</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #6A9955\">// main.js</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">result</span><span style=\"color: #D4D4D4\"> = </span><span style=\"color: #DCDCAA\">add</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #B5CEA8\">1</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #B5CEA8\">2</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">console</span><span style=\"color: #D4D4D4\">.</span><span style=\"color: #DCDCAA\">log</span><span style=\"color: #D4D4D4\">(</span><span style=\"color: #9CDCFE\">result</span><span style=\"color: #D4D4D4\">)</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">})();</span></span></code></pre></app-code-wrapper>\n<p>各ファイルのfunctionスコープがなくなり、バンドル結果がコンパクトになっているのがわかる。もしトップレベルの変数名が他ファイルの変数と被っても自動でリネームしてくれる。\nただ、オプション名の「experimental」からわかるように実験的なサポートのため、特殊なことを行おうとするとうまくビルドされない可能性がある。前回の記事の<a href=\"/blog/wasm-bindgen-with-worker/\">WebAssembly</a>ではできなかった。</p>\n<h2>ビルドスクリプトの見直し（分割化）</h2>\n<p>変更前では、ビルドスクリプトが1本だったので記事をプレビューする場合でもプログラム全体をコンパイルする必要があった。</p>\n<p>現在は、記事のビルド（ts-node）とプログラムのビルド（parcel）を分離して記事単独でビルドできるようにした。また、watchビルドに対応し、コマンドを叩く必要がなくなった。</p>\n<h2>今後</h2>\n<p>rollup.jsでは非対応だったDynamic Importで記事fetchをしてみたい。そうすると、React Suspence使ってみたいからReactに書き換えるかもしれない。</p>"},"__N_SSG":true}