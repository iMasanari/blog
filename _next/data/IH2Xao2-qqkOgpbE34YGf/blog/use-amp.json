{"pageProps":{"post":{"title":"ブログをAMP対応（仮）しました","description":"実質、各ページに `export const config = { amp: 'hybrid' }` を追加しただけ。next.js超ラク。","slug":"use-amp","tags":["AMP","Next.js","blog"],"date":"2020-11-28T08:05:18.607Z"},"next":null,"prev":{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z"},"sameTags":[{"title":"ブログをNext.jsベースに変更した","description":null,"slug":"use-next","tags":["React","Next.js","blog"],"date":"2020-09-20T06:33:49.199Z"},{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26T13:55:56.097Z"},{"title":"ブログをHyperappベースの自作ジェネレータに変更した話","description":"作ったばかりのこのブログだが、Hyperappで動くstaticでSPAなサイトに変更した。React Staticを使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。","slug":"use-hyperapp","tags":["blog","Hyperapp"],"image":"/images/hyperapp.png","date":"2018-07-12T12:45:07.379Z"}],"content":"<p>実質、各ページコンポーネントに <code>export const config = { amp: 'hybrid' }</code> を追加しただけ。<br>\nNext.js超ラク。</p>\n<h2>AMPとは</h2>\n<blockquote>\n<p>Accelerated Mobile Pages (AMP) は、Googleが中心となって立ち上げた、モバイルでのウェブサイト閲覧を高速化することを目的とするオープンソースプロジェクトである。また、AMPの成果物である一連の仕様やライブラリなどについてもAMPと呼ぶ。AMPは、従来より用いられているHTMLなどのウェブ技術を改良したもので、中核となるのはAMP HTMLと呼ばれるHTMLの一種である。</p>\n</blockquote>\n<p>らしいです。Wikipadiaより引用。</p>\n<p>ページの表示が遅くなる書き方を禁止するため、HTMLの書き方が制限されますが、代わりにAMPが用意したコンポーネントを使用できます。そして、AMPのルールに沿って書くことで、モバイル時にGoogle検索からページに入るときなどにAMP Cacheと呼ばれる専用のCDNから配信されるというメリットがあります。</p>\n<h2>やったこと</h2>\n<h3>AMP設定の追加</h3>\n<p>上記の通り、下記を追加しました。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #C586C0\">export</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #569CD6\">const</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #4FC1FF\">config</span><span style=\"color: #D4D4D4\"> = { </span><span style=\"color: #9CDCFE\">amp:</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #CE9178\">'hybrid'</span><span style=\"color: #D4D4D4\"> }</span></span>\n<span class=\"line\"></span></code></pre>\n<p>上記の設定を追加することで、<code>next export</code> 時に下記のようにファイルが出力されます。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">$ tree out/blog</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">out/blog</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── deploy-to-github-pages-user-page</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── deploy-to-github-pages-user-page.amp</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── difference-between-jsx-and-html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── difference-between-jsx-and-html.amp</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── environment-construction</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">├── environment-construction.amp</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">│   └── index.html</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">...</span></span>\n<span class=\"line\"></span></code></pre>\n<p>AMP時は <code>{slug}.amp/index.html</code> に、非AMP時は <code>{slug}/index.html</code> が使用されます。</p>\n<h3>グローバルCSSの読み込み方法の変更</h3>\n<p>グローバルCSSをWebpackの <code>import</code> 経由ではなく、styled-jsx + postcss-importで読み込むように変更しました。Webpackの <code>import</code> だと、AMP時にうまく読み込まれないようです。</p>\n<p>参考： <a href=\"https://github.com/vercel/next.js/issues/7121\">AMP: styles missing when importing standard css files in a project using styled components #7121</a></p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">// src/pages/_app.tsx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-import 'mvp.css'</span></span>\n<span class=\"line\"><span style=\"color: #CE9178\">-import 'prismjs/themes/prism-okaidia.css'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> // ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> &#x3C;style jsx global>{`</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+  @import 'mvp.css';</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+  @import 'prismjs/themes/prism-okaidia.css';</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">   /* ... */</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\"> `}&#x3C;/style></span></span>\n<span class=\"line\"></span></code></pre>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">// postcss.config.js</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">module.exports = {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  plugins: {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">    'postcss-custom-properties': {},</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+   'postcss-import': {},</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  },</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>スタイル調整</h3>\n<p>各ページのコンポーネントについて、非AMP時は <code>&#x3C;div id=\"__next\">...&#x3C;/div></code> の中に展開されますが、AMP時は <code>body</code> 以下に直接展開されます。</p>\n<p>現在このブログで使用しているCSSフレームワークの「mvp.css」に下記のようなスタイルがあったため、AMP時と非AMP時で表示に差異が出ていました。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #6A9955\">/* mvp.css */</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #6A9955\">/* 非AMP時のみ下記が適応されない */</span></span>\n<span class=\"line\"><span style=\"color: #D7BA7D\">article</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #D7BA7D\">header</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #D7BA7D\">div</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #D7BA7D\">header</span><span style=\"color: #D4D4D4\">, </span><span style=\"color: #D7BA7D\">main</span><span style=\"color: #D4D4D4\"> </span><span style=\"color: #D7BA7D\">header</span><span style=\"color: #D4D4D4\"> {</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">  </span><span style=\"color: #9CDCFE\">padding-top</span><span style=\"color: #D4D4D4\">: </span><span style=\"color: #B5CEA8\">0</span><span style=\"color: #D4D4D4\">;</span></span>\n<span class=\"line\"><span style=\"color: #D4D4D4\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>非AMP時でも同じ見た目になるよう、下記を追加しました。</p>\n<pre class=\"shiki\" style=\"background-color: #1E1E1E\"><code><span class=\"line\"><span style=\"color: #D4D4D4\">// src/components/organisms/Header.tsx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+&#x3C;style jsx>{`</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+.Header {</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+  padding-top: 0;</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+}</span></span>\n<span class=\"line\"><span style=\"color: #B5CEA8\">+`}&#x3C;/style></span></span>\n<span class=\"line\"></span></code></pre>\n<h2>やらなかったこと</h2>\n<h3>AMP Componentsの使用</h3>\n<p>画像を使っていなかったので、<code>amp-img</code> すら使っていないです。だからこそ、楽に対応できたというのもあります。<br>\nAMP時と非AMP時の表示の切り替えなどもありません。</p>\n<h2>まとめ</h2>\n<p>シンプルなので、簡単にできました、という感じです。<br>\n画像はそのうち対応したいです。</p>"},"__N_SSG":true}