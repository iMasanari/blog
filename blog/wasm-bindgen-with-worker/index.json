{"component":1,"title":"Rust + wasm-bindgen + WebWorkerの環境構築 - Tech SANDBOX","props":{"post":{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","description":"WebAssembly Advent Calendar 2018の20日目の記事。","slug":"wasm-bindgen-with-worker","tags":["Rust","wasm-bindgen","TypeScript","parcel"],"date":"2018-12-20","update":"2019-04-20T13:15:27.878Z","contents":"<p><a href=https://qiita.com/advent-calendar/2018/wasm rel=noopener target=_blank>WebAssembly Advent Calendar 2018</a>の20日目の記事。<br>※ 2019/4/20: 修正</p><h2 id=tl-dr>TL;DR</h2><p>parcelのparcel-plugin-wasm.rsプラグインを使用しよう！</p><p>サンプルリポジトリはこちら<br><a href=https://github.com/iMasanari/wasm-bindgen-with-worker rel=noopener target=_blank>iMasanari/wasm-bindgen-with-worker</a></p><h2 id=->やりたいこと</h2><p>時間のかかる処理をWebAssemblyで高速に行いたい。そのためには、下記の条件が必要になる。</p><ul><li>引数や戻り値をJSON形式でやりとりできること</li><li>非同期処理であること</li></ul><p>今回は、Rustでwasm-bindgenを使用し、WebWorker内で動かす環境を作っていく。</p><h2 id=1-webpack->1度、WebPackで構築するも……</h2><p>まずは、<a href=https://www.mizdra.net/entry/2018/10/17/080000 rel=noopener target=_blank>WebAssemblyを使って乱数調整ツールをWebに移植した話</a>を元に、WebPackで構築した。しかし、3つの気になる点が出てきた。</p><ul><li>Worker用のエントリーファイルをもう1つ用意しなければならない<ul><li><a href=https://github.com/webpack/webpack/issues/7647 rel=noopener target=_blank>Cannot import wasm in web workers #7647</a></li></ul></li><li>中間ファイル生成（Rust→wasm）のせいで、ビルドタスクが煩雑になる</li><li>ライブリロード<ul><li>ワンテンポ遅いタイミングでページ全体のリロードがされる</li><li>リロードの読み込み時間も長い</li></ul></li></ul><p>エントリーファイルの問題は、WebWorkerのファイル名にハッシュ（<code>worker.2290ab9e.js</code>の<code>2290ab9e</code>部分）が付けられないことである。今回はスクリプトがView、WebWorker、WASMの3ファイルに分かれるので、キャッシュ対策のためにも必要度は高い。</p><h2 id=parcel->parcelでの環境構築</h2><p>Webpackで環境を作って数日後、ふと別のモジュールバンドラを使用すればよいのではと思い、parcelで試してみた。すると、上記のエントリーファイル問題、中間ファイル問題を解決することができた。<br>ライブリロードの件は一応差分更新を試みてくれるが、Rustの更新内容は反映されなかった。ただ、普段ライブリロードは使わず、またワンテンポ遅れの全リロードでないためそこまで問題は感じていない。</p><p>なぜ最初にparcelで試さなかったのかというと、情報がWebpackのものしかなかったからだ。なので今回、parcelでWebWorker + WebAssemblyを扱う方法を共有したい。（といっても、parcelがゼロコンフィグなモジュールバンドラのため、そこまで凝ったことはしていない）</p><h2 id=->各種インストール</h2><p>Node.jsやRustはインストール済みとする。</p><p>parcelのインストール</p><p><del>parcel-plugin-wasm.rs v1.2.7はparcel-bundler v1.11.0に対応していないのかビルドエラーになったため、バージョンを指定してインストールしている。</del> ※最新バージョンで治っていることを確認。</p><pre class=language-bash><code class=language-bash>$ <span class='token function'>npm</span> <span class='token function'>install</span> -D parcel-bundler parcel-plugin-wasm.rs\n</code></pre><p>parcel-plugin-wasm.rsはRustをwasm-packでコンパイルするためのparcelのプラグイン。wasm-packのインストールがまだの場合はインストールする。</p><pre class=language-bash><code class=language-bash>$ cargo <span class='token function'>install</span> wasm-pack\n</code></pre><p>個人的にいつもTypeScriptを使うので、それ関連のインストール。<br><a href=https://www.npmjs.com/package/@types/webassembly-js-api rel=noopener target=_blank>@types/webassembly-js-api</a>は、WebAssemblyの型定義。</p><pre class=language-bash><code class=language-bash>$ <span class='token function'>npm</span> <span class='token function'>install</span> -D typescript @types/webassembly-js-api\n</code></pre><h2 id=->フォルダ構成と設定ファイル</h2><h3 id=-src->フォルダ構成（srcフォルダ）</h3><p>各種フォルダとエントリーポイントのHTMLという構成で、個人的にすごくきれいな配置だと思う。<br>ちなみにこの出力をするためにMacへTreeコマンドを入れた。</p><pre class=language-bash><code class=language-bash>$ tree src\nsrc\n├── app\n│   └── index.ts\n├── wasm\n│   ├── lib.rs\n│   └── lib.rs.d.ts\n├── worker\n│   └── index.ts\n└── index.html\n</code></pre><h3 id=->各種設定ファイル（必要最低限の箇所のみ）</h3><pre class=language-json><code class=language-json><span class='token comment'>// package.json</span>\n<span class='token punctuation'>{</span>\n  <span class='token property'>\"scripts\"</span><span class='token operator'>:</span> <span class='token punctuation'>{</span>\n    <span class='token property'>\"dev\"</span><span class='token operator'>:</span> <span class='token string'>\"parcel src/index.html\"</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"build\"</span><span class='token operator'>:</span> <span class='token string'>\"parcel build src/index.html\"</span><span class='token punctuation'>,</span>\n  <span class='token punctuation'>}</span><span class='token punctuation'>,</span>\n  <span class='token property'>\"devDependencies\"</span><span class='token operator'>:</span> <span class='token punctuation'>{</span>\n    <span class='token property'>\"@types/webassembly-js-api\"</span><span class='token operator'>:</span> <span class='token string'>\"0.0.3\"</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"parcel-bundler\"</span><span class='token operator'>:</span> <span class='token string'>\"^1.12.3\"</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"parcel-plugin-wasm.rs\"</span><span class='token operator'>:</span> <span class='token string'>\"^1.2.8\"</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"typescript\"</span><span class='token operator'>:</span> <span class='token string'>\"^3.4.2\"</span>\n  <span class='token punctuation'>}</span><span class='token punctuation'>,</span>\n  <span class='token property'>\"browserslist\"</span><span class='token operator'>:</span> <span class='token punctuation'>[</span>\n    <span class='token string'>\"last 2 chrome versions\"</span>\n  <span class='token punctuation'>]</span>\n<span class='token punctuation'>}</span>\n</code></pre><pre class=language-toml><code class=language-toml><span class='token comment'># Cargo.toml</span>\n<span class='token punctuation'>[</span><span class='token class-name table'>package</span><span class='token punctuation'>]</span>\n<span class='token property key'>name</span> <span class='token punctuation'>=</span> <span class='token string'>\"wasm\"</span>\n<span class='token property key'>version</span> <span class='token punctuation'>=</span> <span class='token string'>\"0.1.0\"</span>\n\n<span class='token punctuation'>[</span><span class='token class-name table'>dependencies</span><span class='token punctuation'>]</span>\n<span class='token property key'>wasm-bindgen</span> <span class='token punctuation'>=</span> <span class='token string'>\"^0.2\"</span>\n\n<span class='token punctuation'>[</span><span class='token class-name table'>lib</span><span class='token punctuation'>]</span>\n<span class='token property key'>crate-type</span> <span class='token punctuation'>=</span> <span class='token punctuation'>[</span><span class='token class-name table'>\"cdylib\"</span><span class='token punctuation'>]</span>\n<span class='token property key'>path</span> <span class='token punctuation'>=</span> <span class='token string'>\"./src/wasm/lib.rs\"</span>\n</code></pre><pre class=language-json><code class=language-json><span class='token comment'>// tsconfig.json</span>\n<span class='token punctuation'>{</span>\n  <span class='token property'>\"compilerOptions\"</span><span class='token operator'>:</span> <span class='token punctuation'>{</span>\n    <span class='token property'>\"target\"</span><span class='token operator'>:</span> <span class='token string'>\"es2015\"</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"lib\"</span><span class='token operator'>:</span> <span class='token punctuation'>[</span>\n      <span class='token string'>\"es2015\"</span><span class='token punctuation'>,</span>\n      <span class='token string'>\"dom\"</span><span class='token punctuation'>,</span>\n      <span class='token string'>\"webworker\"</span>\n    <span class='token punctuation'>]</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"strict\"</span><span class='token operator'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n    <span class='token property'>\"esModuleInterop\"</span><span class='token operator'>:</span> <span class='token boolean'>true</span>\n  <span class='token punctuation'>}</span>\n<span class='token punctuation'>}</span>\n</code></pre><p>WebAssembly未対応のIEを切り捨て、TypeScriptのコンパイルはes2015で行っている。parcelのbabel側でes5に変換されないよう、<code>package.json</code>では<code>browserslist</code>の設定を行う。</p><h2 id=->各ファイル</h2><p>全部書くのも面倒なので、各ファイルのインポート部分だけ書いていく。<br>書き足している場所もあるが、全体はサンプルリポジトリを参照。<br><a href=https://github.com/iMasanari/wasm-bindgen-with-worker rel=noopener target=_blank>iMasanari/wasm-bindgen-with-worker</a></p><pre class=language-html><code class=language-html><span class='token comment'>&lt;!-- src/index.html --></span>\n<span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>script</span> <span class='token attr-name'>src</span><span class='token attr-value'><span class='token punctuation'>=</span><span class='token punctuation'>\"</span>app/index.ts<span class='token punctuation'>\"</span></span><span class='token punctuation'>></span></span><span class='token script'></span><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>script</span><span class='token punctuation'>></span></span>\n</code></pre><pre class=language-typescript><code class=language-typescript><span class='token comment'>// src/app/index.ts</span>\n<span class='token keyword'>const</span> worker <span class='token operator'>=</span> <span class='token keyword'>new</span> <span class='token class-name'>Worker</span><span class='token punctuation'>(</span><span class='token string'>'../worker/index.ts'</span><span class='token punctuation'>)</span>\n</code></pre><pre class=language-typescript><code class=language-typescript><span class='token comment'>// src/worker/index.ts</span>\n<span class='token keyword'>import</span> <span class='token operator'>*</span> <span class='token keyword'>as</span> wasm <span class='token keyword'>from</span> <span class='token string'>'../wasm/lib.rs'</span>\n\n<span class='token comment'>// WebAssemblyの実行</span>\nwasm<span class='token punctuation'>.</span><span class='token function'>some_function</span><span class='token punctuation'>(</span><span class='token string'>'WebAssembly'</span><span class='token punctuation'>)</span>\n</code></pre><p>あとは、Rustの関数を作るだけ。<br>現在のWebAssemblyは数値しかやりとりができないが、wasm-bindgenを使うことで文字列やJSONもやりとりができるようになる。</p><pre class=language-rust><code class=language-rust><span class='token comment'>// src/wasm/lib.rs</span>\n<span class='token keyword'>extern</span> <span class='token keyword'>crate</span> wasm_bindgen<span class='token punctuation'>;</span>\n<span class='token keyword'>use</span> wasm_bindgen<span class='token punctuation'>:</span><span class='token punctuation'>:</span>prelude<span class='token punctuation'>:</span><span class='token punctuation'>:</span><span class='token operator'>*</span><span class='token punctuation'>;</span>\n\n<span class='token attr-name attribute'>#[wasm_bindgen]</span>\n<span class='token keyword'>pub</span> <span class='token keyword'>fn</span> <span class='token function'>some_function</span><span class='token punctuation'>(</span>input<span class='token punctuation'>:</span> <span class='token operator'>&amp;</span>str<span class='token punctuation'>)</span> <span class='token punctuation'>-></span> String <span class='token punctuation'>{</span>\n    <span class='token function'>format!</span><span class='token punctuation'>(</span><span class='token string'>\"Hello, {}!\"</span><span class='token punctuation'>,</span> input<span class='token punctuation'>)</span>\n<span class='token punctuation'>}</span>\n</code></pre><p>ビルドも下記コマンドだけでOK。<br>初回だけ、Rustのビルドに時間がかかる。</p><pre class=language-bash><code class=language-bash><span class='token comment'># デバッグ用ビルド + サーバー</span>\n$ <span class='token function'>npm</span> run dev\n</code></pre><pre class=language-bash><code class=language-bash><span class='token comment'># プロダクションビルド</span>\n$ <span class='token function'>npm</span> run build\n</code></pre><p>出力結果はこんな感じ。<br>なぜか<code>lib.rs</code>まで出力されているが、ちゃんとハッシュが付いているのが確認できる。</p><pre class=language-bash><code class=language-bash>$ tree dist\ndist\n├── app.68414551.js\n├── index.html\n├── lib.3d22fd5b.rs\n├── wasm_bg.ead9fc9c.wasm\n└── worker.135e8d27.js\n</code></pre><h2 id=webpack->Webpackとの違い</h2><h3 id=rust-javascript->RustからのJavaScriptコード呼び出しパス</h3><p>Webpackでは、pkgフォルダ内のファイルをインポートするため、相対パスの基準は<code>pkg/</code>である。<br>parcel(parcel-plugin-wasm.rs)では、<code>node_modules/parcel-plugin-wasm.rs/</code>が基準である。parcelの絶対パス（<code>/*</code>）を使えば、エントリーファイルの場所（今回は<code>src/</code>）が基準になる。</p><pre class=language-rust><code class=language-rust><span class='token comment'>// src/wasm/lib.rs</span>\n<span class='token attr-name attribute'>#[wasm_bindgen(module = \"/worker/wasm-util\")]</span>\n<span class='token keyword'>extern</span> <span class='token punctuation'>{</span>\n    <span class='token keyword'>fn</span> <span class='token function'>console_log</span><span class='token punctuation'>(</span>s<span class='token punctuation'>:</span> <span class='token operator'>&amp;</span>str<span class='token punctuation'>)</span><span class='token punctuation'>;</span>\n<span class='token punctuation'>}</span>\n</code></pre><h3 id=webworker-rust->WebWorker側でのRustインポート</h3><p>Webpackでは、WASMをインポートするまでに必ずDynamic importを挟む必要がある。<br>parcelではその必要がなく、直接importする。（そもそもWebWroker内でのDynamic importがサポートされていない？）</p><p>つまり、parcelではWASMロード中の<code>postMessage</code>を取りこぼしてしまう可能性がある。<br>そのため<a href=https://github.com/iMasanari/wasm-bindgen-with-worker rel=noopener target=_blank>サンプル</a>では、<a href=https://github.com/iMasanari/wasm-bindgen-with-worker/blob/master/src/app/wasmWorker.ts#L24 rel=noopener target=_blank>ロードを待ってからメッセージを送る</a>ようにしている。</p><h2 id=->まとめ</h2><p>parcelを使うことで、簡単にWebAssemblyが始められる。</p><p>ちなみにRustは、C言語並みの処理スピードを持ちながらモダンな文法と強力なコンパイル時チェックを備えている言語でおすすめ！　所有権、借用、ライフタイム？　学習コストが高い？　知らんな。一緒に<a href=https://doc.rust-jp.rs/the-rust-programming-language-ja/1.6/book/references-and-borrowing.html#概論 rel=noopener target=_blank>借用チェッカと戦おうぜ！</a> by Rust初心者</p>"},"next":{"title":"HTMLでは使えないJSX独自の書き方","slug":"difference-between-jsx-and-html"},"sameTags":[{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","slug":"remove-object-key","date":"2018-07-13","tags":["JavaScript","Babel","TypeScript"]},{"title":"React StaticでTypeScriptを使用した時のエラー対処法","slug":"webpacks-rules-in-static-config-js","date":"2018-07-03","tags":["ReactStatic","TypeScript","webpack"]},{"title":"ブログで使用した技術","slug":"use-technology","date":"2018-06-30","tags":["blog","React","preact","TypeScript","ReactStatic"]}]}}