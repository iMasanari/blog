{"component":1,"title":"【書き途中】ブログをHyperappベースの自作ジェネレータに変更した話 - Tech SANDBOX","props":{"post":{"title":"【書き途中】ブログをHyperappベースの自作ジェネレータに変更した話","description":"作ったばかりのこのブログだが、Hyperappで動くstaticでSPAなサイトに変更した。React Staticを使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。","slug":"use-hyperapp","tags":["blog","Hyperapp"],"date":"2018-07-12","contents":"<h2>はじめに</h2>\n<p>作ったばかりのこのブログだが、<a href=\"https://github.com/hyperapp/hyperapp\" target=\"_blank\" rel=\"noopener\">Hyperapp</a>で動くstaticでSPAなサイトに変更した。<br><a href=\"react-static\">React Static</a>を使用していた時とは違って、HTMLの書き出しなどは自分で処理を行っている。まだ未完成な機能もあるが、ビルド後のJavaScriptが約8KBと軽量で気に入っている。</p>\n<h2>なぜ変更したのか</h2>\n<ul>\n<li><a href=\"/blog/use-technology/\">ブログで使用した技術</a>の通り<ul>\n<li><a href=\"https://github.com/hyperapp/hyperapp\" target=\"_blank\" rel=\"noopener\">Hyperapp</a>があるじゃんとなったのがきっかけ</li>\n</ul>\n</li>\n<li>ブログではstateやactionがページ遷移関係でしか使っていないことに気づいた<ul>\n<li>全て<a href=\"react-static\">React Static</a>に隠されている</li>\n</ul>\n</li>\n<li>車輪の再発明が好き</li>\n</ul>\n<h2>移行について</h2>\n<h3>View部分</h3>\n<p>jsxが流用できたのでView部分は楽だった。もともとSFCのみでクラスコンポーネントがほぼない。メインコンテンツである記事はmarkdown管理なので問題なし。</p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted\">-import React from 'react'</span>\n<span class=\"token deleted\">-import { Link } from 'react-static'</span>\n<span class=\"token inserted\">+import { h } from 'hyperapp'</span>\n<span class=\"token inserted\">+import { Link } from '@hyperapp/router'</span>\n\n // 中略\n\n<span class=\"token deleted\">-export default withRouteData(</span>\n<span class=\"token deleted\">-  ({ posts }: Props) =></span>\n<span class=\"token deleted\">-    &lt;div className=\"\"></span>\n<span class=\"token inserted\">+export default ({ posts }: Props) =></span>\n<span class=\"token inserted\">+  &lt;div class=\"\"></span>\n\n // 後略\n</code></pre><p>コンポーネントで実際に変更したのはこのくらい。</p>\n<h3>ビルドスクリプトはなんとかなる</h3>\n<p>なんとかなった。</p>\n<p><code>requireWithRollup</code>関数を作れたのが大きい。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// rollupのpluginを適用してrequireできる</span>\n<span class=\"token keyword\">const</span> Template <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">requireWithRollup</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./src/Template.tsx'</span><span class=\"token punctuation\">,</span> rollupConfig<span class=\"token punctuation\">)</span>\n</code></pre><p>実装は<a href=\"requireWithRollup\">ここ</a>。rollup.jsが自身の設定ファイルを読み込む方法を参考にした。</p>\n<p>設定ファイルやビルド方法は<a href=\"react-static\">React Static</a>を<s>パクった</s>かなり参考にした。</p>\n<h2>ルーティング、およびページ遷移部分</h2>\n<p>ここが一番苦労している。エントリーポイントのindex.tsxがごちゃごちゃしてしまった。書き直すならここ。</p>\n<h2>未実装部分</h2>\n<p>ページ遷移周りが適当</p>\n<ul>\n<li>ページプリキャッシュ部分<ul>\n<li>現在はリンククリック時にjson読み込み</li>\n<li>prefetchやpreloadで先読み？ それともServise Workerを使う？</li>\n<li>スクリプトが軽いのでいっそJSで雑に先読みしちゃうのもありかも<ul>\n<li>【追記】この方法で仮実装</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>iPhoneでスワイプして戻るとちらつく<ul>\n<li>前画面のデータをキャッシュしててもダメ</li>\n<li><a href=\"react-static\">React Static</a>の時には起こらなかった</li>\n</ul>\n</li>\n</ul>\n<h2>やるかどうかわからない</h2>\n<p>ジェネレータ部分を分離</p>\n"},"prev":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","slug":"remove-object-key"},"next":{"title":"React StaticでTypeScriptを使用した時のエラー対処法","slug":"webpacks-rules-in-static-config-js"}}}