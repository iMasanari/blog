{"component":1,"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する - Tech SANDBOX","props":{"post":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","description":"ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。","slug":"remove-object-key","tags":["JavaScript","Babel","TypeScript"],"date":"2018-07-13","contents":"<h2 id=->はじめに</h2><p>ブログを作る前、Qiitaに投稿しようと書いていたけど途中でやめ、最近まで忘れていた記事です。Qiitaでもいいけど、せっかくだからこっちに置いておきます。</p><h2 id=->削除したいキーが最初から決まっている場合</h2><p>例えばfooキーを削除した新しいオブジェクトを作成する場合、Rest Propertiesを使用し次のように書くことができます。</p><pre class=language-js><code class=language-js><span class='token keyword'>const</span> <span class='token function function-variable'>removeFoo</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span>obj<span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span>\n  <span class='token keyword'>const</span> <span class='token punctuation'>{</span> foo<span class='token punctuation'>,</span> <span class='token operator'>...</span>res <span class='token punctuation'>}</span> <span class='token operator'>=</span> obj\n\n  <span class='token keyword'>return</span> res\n<span class='token punctuation'>}</span>\n\n<span class='token function'>removeFoo</span><span class='token punctuation'>(</span><span class='token punctuation'>{</span> foo<span class='token punctuation'>:</span> <span class='token string'>''</span><span class='token punctuation'>,</span> bar<span class='token punctuation'>:</span> <span class='token number'>0</span> <span class='token punctuation'>}</span><span class='token punctuation'>)</span> <span class='token comment'>// { bar: 0 }</span>\n</code></pre><p><code>foo</code>は削除される値というのをわかりやすくするために、<br><code>const { foo: _removed, ...res } = obj</code><br>と、<code>_removed</code>などに変数名を変更してもいいかもしれません。</p><h2 id=->削除したいキーが最初から決まっていない場合</h2><p>では、引数などから与えられたキーを削除するにはどうすればいいのでしょうか。</p><pre class=language-js><code class=language-js><span class='token keyword'>const</span> <span class='token function function-variable'>removeKey</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span>obj<span class='token punctuation'>,</span> key<span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span>\n  <span class='token keyword'>const</span> res <span class='token operator'>=</span> <span class='token punctuation'>{</span> <span class='token operator'>...</span>obj <span class='token punctuation'>}</span>\n  <span class='token keyword'>delete</span> res<span class='token punctuation'>[</span>key<span class='token punctuation'>]</span>\n\n  <span class='token keyword'>return</span> res\n<span class='token punctuation'>}</span>\n</code></pre><p>と書くのは少し抵抗がありますよね。</p><p>いろいろ試していると、次の方法で任意のキーを取り除くことができました。</p><pre class=language-js><code class=language-js><span class='token keyword'>const</span> <span class='token function function-variable'>removeKey</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span>obj<span class='token punctuation'>,</span> key<span class='token punctuation'>)</span> <span class='token operator'>=></span> <span class='token punctuation'>{</span>\n  <span class='token keyword'>const</span> <span class='token punctuation'>{</span> <span class='token punctuation'>[</span>key<span class='token punctuation'>]</span><span class='token punctuation'>:</span> _removed<span class='token punctuation'>,</span> <span class='token operator'>...</span>res <span class='token punctuation'>}</span> <span class='token operator'>=</span> obj\n\n  <span class='token keyword'>return</span> res\n<span class='token punctuation'>}</span>\n\n<span class='token function'>removeKey</span><span class='token punctuation'>(</span><span class='token punctuation'>{</span> foo<span class='token punctuation'>:</span> <span class='token string'>''</span><span class='token punctuation'>,</span> bar<span class='token punctuation'>:</span> <span class='token number'>0</span> <span class='token punctuation'>}</span><span class='token punctuation'>,</span> <span class='token string'>'bar'</span><span class='token punctuation'>)</span> <span class='token comment'>// { foo: '' }</span>\n</code></pre><p>ポイントは、<code>{ [key]: _removed }</code>の部分です。<br><code>{ [key], ...res }</code>としただけでは構文エラーとなります。<br>おそらく、この書き方だと取り出す<code>key</code>の名前が不明なためかと思います。</p><h2 id=->まとめ</h2><p>Reduxなどでオブジェクトをimmutableに扱う機会は多いと思います。immutableなHashMapでキーを取り除きたいと思ったときはぜひ使ってみてください！</p><p>この方法は、BabelおよびTypeScriptで動作確認を行いました。両方対応しているということはおそらく仕様にあるということだと思いますが、一度ecma262の仕様から探してみたいですね。</p>"},"prev":{"title":"自作ブログのHTMLをminifyした","slug":"html-minify"},"next":{"title":"【書き途中】ブログをHyperappベースの自作ジェネレータに変更した話","slug":"use-hyperapp"},"sameTags":[{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","slug":"wasm-bindgen-with-worker","date":"2018-12-20","tags":["Rust","wasm-bindgen","TypeScript","parcel"]},{"title":"React StaticでTypeScriptを使用した時のエラー対処法","slug":"webpacks-rules-in-static-config-js","date":"2018-07-03","tags":["ReactStatic","TypeScript","webpack"]},{"title":"ブログで使用した技術","slug":"use-technology","date":"2018-06-30","tags":["blog","React","preact","TypeScript","ReactStatic"]}]}}