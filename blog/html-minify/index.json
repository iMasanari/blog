{"component":1,"title":"自作ブログのHTMLをminifyした - Tech SANDBOX","props":{"post":{"title":"自作ブログのHTMLをminifyした","description":"HTMLはホワイトスペースの問題があり、minifyする、しないの意見が別れるようだ。私は普段、HTMLまでは行わないのだが、今回はhtml-minifierを使用してHTMLを圧縮したのでそのメモを残しておく。","slug":"html-minify","tags":["html-minifier"],"image":"/images/html-minify.png","date":"2018-07-29","contents":"<h2>はじめに</h2><p>HTMLはホワイトスペースの問題があり、minifyする、しないの意見が別れるようだ。私は普段、HTMLまでは行わないのだが、今回は<a href=https://github.com/kangax/html-minifier rel=noopener target=_blank>html-minifier</a>を使用してHTMLを圧縮したのでそのメモを残しておく。</p><h2>動機</h2><ul><li>markdownの変換するHTMLが気に入らない<ul><li>改行はあるがインデントはなく、整形が中途半端</li><li>minifyして綺麗にしよう！</li></ul></li><li>軽量化<ul><li>Hyperappにしたので、軽さにはこだわりたい</li></ul></li></ul><h2>設定</h2><p>このブログのHTMLは、Hyperappで生成される部分とmarkdownで生成される部分の2つがある。今回はそれぞれ別の設定でminifyを行った。</p><h3>Hyperapp / HTML</h3><pre class=language-js><code class=language-js><span class='token punctuation'>{</span>\n  minifyCSS<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  minifyJS<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  removeAttributeQuotes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  sortAttributes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  sortClassName<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n<span class='token punctuation'>}</span>\n</code></pre><p>この設定は、Hyperappが事前レンダリングで生成したHTMLに対して行うものである。Virtual DOMから生成されるHTMLには不必要な空白はなく、また実際のDOMとズレているとエラーになりうるので破壊的な変更は行っていない。なので、プロダクションビルド時にのみ行っている。</p><p><code>minifyJS</code>は埋め込まれたHyperappの初期state用の設定だ。JSON形式で埋め込まれるため、その余分なクォートを取り除いている。</p><pre class=language-diff><code class=language-diff><span class='token deleted'>-var __data = {\"foo\": \"bar\"}</span>\n<span class='token inserted'>+var __data = {foo: \"bar\"}</span>\n</code></pre><h3>markdown / JSON</h3><pre class=language-js><code class=language-js><span class='token punctuation'>{</span>\n  collapseBooleanAttributes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  <span class='token comment'>// collapseInlineTagWhitespace: true,</span>\n  collapseWhitespace<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  quoteCharacter<span class='token punctuation'>:</span> <span class='token template-string'><span class='token string'>`'`</span></span><span class='token punctuation'>,</span>\n  removeAttributeQuotes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  removeRedundantAttributes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  sortAttributes<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n  sortClassName<span class='token punctuation'>:</span> <span class='token boolean'>true</span><span class='token punctuation'>,</span>\n<span class='token punctuation'>}</span>\n</code></pre><p>markdownは、ホワイトスペースの削除など破壊的になりうる設定を取り入れている。これは、Hyperappの<code>innerHTML</code>で入れているためVirtual DOMの管理外であるからだ。こちらは、破壊箇所がないか様子を見るためにプロダクションビルドでない時にもminifyを行っている。（そのうちプロダクションビルド時のみにしたい）</p><p>最初は、細かい作り込みができないmarkdownでは<code>collapseInlineTagWhitespace</code>の影響を受けることはないだろうと有効にしていた。しかし、<code>**foo** **bar**</code>と書いた時に間のスペースが消えることに気づき、またその設定で効果が出るHTMLをmarkdownが生成するとは思えないのでオフにした。</p><p>また、このHTMLはJSONの中にも埋め込まれることから、シングルクォート使用するよう設定した。</p><h2>採用を断念した設定</h2><p>markdownで<code>removeOptionalTags</code>というオプションを使用したかったのだが今回の用法では見送った。これは、省略可能なタグを削除するもので、<code>p</code>や<code>li</code>の終了タグがその対象の1つだ。</p><p>今回の用法では、markdown時、Hyperapp時と2重にminifyされる。1回目の時に<code>removeOptionalTags</code>を有効にすると、2回目の時にHTMLが正しくパースされなかった。</p><pre class=language-html><code class=language-html><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>p</span><span class='token punctuation'>></span></span>終了タグは省略\n<span class='token comment'>&lt;!-- 終了タグの正しい場所 --></span>\n<span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>pre</span><span class='token punctuation'>></span></span><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>code</span><span class='token punctuation'>></span></span>/* 別のタグ */<span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>code</span><span class='token punctuation'>></span></span><span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;/</span>pre</span><span class='token punctuation'>></span></span>\n<span class='token comment'>&lt;!-- html-minifierが&lt;/p>を挿入した場所 --></span>\n<span class='token tag'><span class='token tag'><span class='token punctuation'>&lt;</span>p</span><span class='token punctuation'>></span></span>別のpタグ\n</code></pre><p>2回目の時にもそのオプションが有効なら間違えて挿入した終了タグも削除された。だが、間違えた状態でminifyされるコードを信頼できないため、<code>removeOptionalTags</code>は行わないことにした。</p><h2>結果</h2><p>1つ前の記事<a href=/blog/remove-object-key/ >【ES.next】Objectから任意のキーを削除した新しいObjectを作成する</a>をminifyした。</p><table><thead><tr><th align=left>設定</th><th align=right>HTML</th><th align=right>JSON</th></tr></thead><tbody><tr><td align=left>HTML minifyなし</td><td align=right>14,170 Byte</td><td align=right>6,275 Byte</td></tr><tr><td align=left><code>removeOptionalTags</code>なし</td><td align=right>13,872 Byte</td><td align=right>6,088 Byte</td></tr><tr><td align=left><code>removeOptionalTags</code>あり</td><td align=right>13,722 Byte</td><td align=right>6,037 Byte</td></tr></tbody></table><p><code>removeOptionalTags</code>をありにしても元のHTMLの96.8%程度。インデントなしのHTMLをminifyしてもあまり効果はないようだ。<br>また、<code>removeOptionalTags</code>の有無もあまり差はなかった。箇条書きを多用すればもう少し差が開く可能性はあるが、わざわざ有効にするほどでもなさそう。</p>"},"prev":{"title":"私の必要最低限な環境構築","slug":"environment-construction"},"next":{"title":"【ES.next】Objectから任意のキーを削除した新しいObjectを作成する","slug":"remove-object-key"},"sameTags":[]}}