{"component":1,"title":"ブログ開発をParcelに変更した - Tech SANDBOX","props":{"post":{"title":"ブログ開発をParcelに変更した","description":"前回の記事でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。決め手は、Tree Shakingがサポートされていたから。","slug":"use-parcel","tags":["parcel","blog"],"date":"2019-04-26","contents":"<section class='is-rounded nes-container with-title'><p><a href=/blog/wasm-bindgen-with-worker/ >前回の記事</a>でparcelを使用して便利だったので、このブログのモジュールバンドラをparcelに変更した。</p><p>理由は以下の2つ。</p><ul><li>フラットなコンパイルが（実験的に）サポートされていたから</li><li>ビルドスクリプトの見直し（分割化）</li></ul></section><section class='is-rounded nes-container with-title'><h2 class=title>フラットなコンパイル</h2><p>Tree Shakingがサポートされていたため。<code>--experimental-scope-hoisting</code>で有効にできる。<br>しかも普段使っているrollup.jsと同じ、フラットなコンパイルである。</p><p>というのも、今までのバンドルでは各ファイルのスコープを保つため、それぞれのファイルを<code>function</code>で囲っていた。</p><pre class=language-js><code class=language-js><span class='token comment'>// フラットでないバンドル結果のイメージ</span>\n<span class='token punctuation'>(</span><span class='token keyword'>function</span><span class='token punctuation'>(</span><span class='token punctuation'>)</span><span class='token punctuation'>{</span>\n  <span class='token comment'>// boostrap code</span>\n  <span class='token comment'>// ...</span>\n<span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>(</span><span class='token punctuation'>{</span>\n  <span class='token string'>'module.js'</span><span class='token operator'>:</span> <span class='token keyword'>function</span> <span class='token punctuation'>(</span><span class='token parameter'><span class='token keyword'>export</span><span class='token punctuation'>,</span> require</span><span class='token punctuation'>)</span> <span class='token punctuation'>{</span>\n    <span class='token keyword'>const</span> <span class='token function function-variable'>add</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span><span class='token parameter'>a<span class='token punctuation'>,</span> b</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> a <span class='token operator'>+</span> b\n\n    <span class='token keyword'>export</span><span class='token punctuation'>.</span>add <span class='token operator'>=</span> add\n  <span class='token punctuation'>}</span><span class='token punctuation'>,</span>\n  <span class='token string'>'main.js'</span><span class='token operator'>:</span> <span class='token keyword'>function</span> <span class='token punctuation'>(</span><span class='token parameter'><span class='token keyword'>export</span><span class='token punctuation'>,</span> require</span><span class='token punctuation'>)</span> <span class='token punctuation'>{</span>\n    <span class='token keyword'>const</span> add <span class='token operator'>=</span> <span class='token function'>require</span><span class='token punctuation'>(</span><span class='token string'>'module.js'</span><span class='token punctuation'>)</span><span class='token punctuation'>.</span>add\n\n    <span class='token keyword'>const</span> result <span class='token operator'>=</span> <span class='token function'>add</span><span class='token punctuation'>(</span><span class='token number'>1</span><span class='token punctuation'>,</span> <span class='token number'>2</span><span class='token punctuation'>)</span>\n    console<span class='token punctuation'>.</span><span class='token function'>log</span><span class='token punctuation'>(</span>result<span class='token punctuation'>)</span>\n  <span class='token punctuation'>}</span>\n<span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span>\n</code></pre><p>それが、こうなる。</p><pre class=language-js><code class=language-js><span class='token comment'>// フラットなバンドル結果のイメージ</span>\n<span class='token punctuation'>(</span><span class='token keyword'>function</span><span class='token punctuation'>(</span><span class='token punctuation'>)</span> <span class='token punctuation'>{</span>\n  <span class='token comment'>// module.js</span>\n  <span class='token keyword'>const</span> <span class='token function function-variable'>add</span> <span class='token operator'>=</span> <span class='token punctuation'>(</span><span class='token parameter'>a<span class='token punctuation'>,</span> b</span><span class='token punctuation'>)</span> <span class='token operator'>=></span> a <span class='token operator'>+</span> b\n  <span class='token comment'>// main.js</span>\n  <span class='token keyword'>const</span> result <span class='token operator'>=</span> <span class='token function'>add</span><span class='token punctuation'>(</span><span class='token number'>1</span><span class='token punctuation'>,</span> <span class='token number'>2</span><span class='token punctuation'>)</span>\n  console<span class='token punctuation'>.</span><span class='token function'>log</span><span class='token punctuation'>(</span>result<span class='token punctuation'>)</span>\n<span class='token punctuation'>}</span><span class='token punctuation'>)</span><span class='token punctuation'>(</span><span class='token punctuation'>)</span><span class='token punctuation'>;</span>\n</code></pre><p>各ファイルのfunctionスコープがなくなり、バンドル結果がコンパクトになっているのがわかる。もしトップレベルの変数名が他ファイルの変数と被っても自動でリネームしてくれる。<br>ただ、オプション名の「experimental」からわかるように実験的なサポートのため、特殊なことを行おうとするとうまくビルドされない可能性がある。前回の記事の<a href=/blog/wasm-bindgen-with-worker/ >WebAssembly</a>ではできなかった。</p></section><section class='is-rounded nes-container with-title'><h2 class=title>ビルドスクリプトの見直し（分割化）</h2><p>変更前では、ビルドスクリプトが1本だったので記事をプレビューする場合でもプログラム全体をコンパイルする必要があった。</p><p>現在は、記事のビルド（ts-node）とプログラムのビルド（parcel）を分離して記事単独でビルドできるようにした。また、watchビルドに対応し、コマンドを叩く必要がなくなった。</p></section><section class='is-rounded nes-container with-title'><h2 class=title>今後</h2><p>rollup.jsでは非対応だったDynamic Importで記事fetchをしてみたい。そうすると、React Suspence使ってみたいからReactに書き換えるかもしれない。</p></section>"},"next":{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","slug":"wasm-bindgen-with-worker"},"sameTags":[{"title":"Rust + wasm-bindgen + WebWorkerの環境構築","slug":"wasm-bindgen-with-worker","date":"2018-12-20","tags":["Rust","wasm-bindgen","TypeScript","parcel"]},{"title":"ブログをHyperappベースの自作ジェネレータに変更した話","slug":"use-hyperapp","date":"2018-07-12","tags":["blog","Hyperapp"]},{"title":"ブログで使用した技術","slug":"use-technology","date":"2018-06-30","tags":["blog","React","preact","TypeScript","ReactStatic"]},{"title":"react-strictでブログ作成しました","slug":"first-post","date":"2018-06-29","tags":["blog"]}]}}