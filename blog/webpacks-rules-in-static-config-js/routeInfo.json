{"path":"blog/webpacks-rules-in-static-config-js","templateID":2,"sharedPropsHashes":{},"localProps":{"post":{"title":"static.config.jsでwebpackのrulesを変更した時のエラーの対処法","slug":"webpacks-rules-in-static-config-js","tags":["ReactStatic","webpack"],"date":"2018-07-03","contents":"<h2>rulesを変更して<code>npm run build</code>するとエラーに</h2>\n<p>このブログはReact StaticのTypeScriptのexsampleがベースになっている。<br>サンプルは開発中(<code>npm run start</code>)では問題はないが、プロダクションビルド(<code>npm run build</code>)するとエラーになるのでその対処法をメモして置く。</p>\n<pre><code class=\"hljs lang-shell\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm run build</span>\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> ...</span>\nError: Module build failed: Error: \"extract-text-webpack-plugin\" loader is used \nwithout the  corresponding plugin, refer to \nhttps://github.com/webpack/extract-text-webpack-plugin for th  e usage example</code></pre>\n<p>サンプルの初期コードどころか、そもそも下記の設定で動かなかった。</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">// static.config.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// ...</span>\n  webpack: <span class=\"hljs-function\">(<span class=\"hljs-params\">config, { defaultLoaders }</span>) =&gt;</span> {\n    config.module.rules = [{\n      <span class=\"hljs-attr\">oneOf</span>: [\n        <span class=\"hljs-comment\">// ↓tsの設定を無くしデフォルトのを使用するもエラー継続</span>\n        defaultLoaders.jsLoader,\n        defaultLoaders.cssLoader,\n        defaultLoaders.fileLoader,\n      ],\n    }]\n\n    <span class=\"hljs-keyword\">return</span> config\n  }\n}</code></pre>\n<p>デフォルトとは一体…</p>\n<p><code>config.module.rules</code>を変更しない場合は問題なくビルドすることができる。<br><code>defaultLoaders.cssLoader</code>が悪さをしているようだ。</p>\n<h2>暫定的対処法</h2>\n<p><code>defaultLoaders.cssLoader</code>を使わず、既存のルールの先頭に追加したい処理を置く。<br>ルールは<code>oneOf</code>で書かれているため、最初に一致するルールのみが使用される。先頭に追加することで、既存のルールは変更することなくマイルールを適用することができるのだ。</p>\n<pre><code class=\"hljs lang-js\"><span class=\"hljs-comment\">// static.config.js</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-comment\">// ...</span>\n  webpack: <span class=\"hljs-function\">(<span class=\"hljs-params\">config, { defaultLoaders }</span>) =&gt;</span> {\n    config.resolve.extensions.push(<span class=\"hljs-string\">'.ts'</span>, <span class=\"hljs-string\">'.tsx'</span>)\n\n    config.module.rules[<span class=\"hljs-number\">0</span>].oneOf.unshift({\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(js|jsx|ts|tsx)$/</span>,\n      <span class=\"hljs-attr\">exclude</span>: defaultLoaders.jsLoader.exclude, <span class=\"hljs-comment\">// as std jsLoader exclude</span>\n      use: [\n        { <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'babel-loader'</span> },\n        {\n          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-built_in\">require</span>.resolve(<span class=\"hljs-string\">'ts-loader'</span>),\n          <span class=\"hljs-attr\">options</span>: { <span class=\"hljs-attr\">transpileOnly</span>: <span class=\"hljs-literal\">true</span> },\n        },\n      ],\n    })\n\n    <span class=\"hljs-keyword\">return</span> config\n  },\n}</code></pre>\n<p>現在はこのような設定になっている。<br>あまり気に入った方法ではないが、しばらくはこれで様子を見ることにする。</p>\n"},"next":{"title":"GitHub PagesのUser Pageにdistフォルダをデプロイする","slug":"deploy-to-github-pages-user-page"}}}
