{
  "component": 1,
  "title": "React StaticでTypeScriptを使用した時のエラー対処法 - Tech SANDBOX",
  "props": {
    "post": {
      "title": "React StaticでTypeScriptを使用した時のエラー対処法",
      "description": "static.config.jsのwebpack設定を変更することで起こるエラーの対処法。",
      "slug": "webpacks-rules-in-static-config-js",
      "tags": [
        "ReactStatic",
        "TypeScript",
        "webpack"
      ],
      "date": "2018-07-03",
      "contents": "<h2>rulesを変更して<code>npm run build</code>するとエラーに</h2>\n<p>このブログはReact StaticのTypeScriptのexsampleがベースになっている。<br>サンプルは開発中(<code>npm run start</code>)では問題はないが、プロダクションビルド(<code>npm run build</code>)するとエラーになるのでその対処法をメモして置く。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run build\n<span class=\"token comment\"># ...</span>\nError: Module build failed: Error: <span class=\"token string\">\"extract-text-webpack-plugin\"</span> loader is used \nwithout the  corresponding plugin, refer to \nhttps://github.com/webpack/extract-text-webpack-plugin <span class=\"token keyword\">for</span> th  e usage example\n</code></pre><p>サンプルの初期コードどころか、そもそも下記の設定で動かなかった。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// static.config.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webpack<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> defaultLoaders <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n      oneOf<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token comment\">// ↓tsの設定を無くしデフォルトのを使用するもエラー継続</span>\n        defaultLoaders<span class=\"token punctuation\">.</span>jsLoader<span class=\"token punctuation\">,</span>\n        defaultLoaders<span class=\"token punctuation\">.</span>cssLoader<span class=\"token punctuation\">,</span>\n        defaultLoaders<span class=\"token punctuation\">.</span>fileLoader<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>デフォルトとは一体…</p>\n<p><code>config.module.rules</code>を変更しない場合は問題なくビルドすることができる。<br><code>defaultLoaders.cssLoader</code>が悪さをしているようだ。</p>\n<h2>暫定的対処法</h2>\n<p><code>defaultLoaders.cssLoader</code>を使わず、既存のルールの先頭に追加したい処理を置く。<br>ルールは<code>oneOf</code>で書かれているため、最初に一致するルールのみが使用される。先頭に追加することで、既存のルールは変更することなくマイルールを適用することができるのだ。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// static.config.js</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  webpack<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> defaultLoaders <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    config<span class=\"token punctuation\">.</span>resolve<span class=\"token punctuation\">.</span>extensions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'.tsx'</span><span class=\"token punctuation\">)</span>\n\n    config<span class=\"token punctuation\">.</span>module<span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>oneOf<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.(js|jsx|ts|tsx)$/</span><span class=\"token punctuation\">,</span>\n      exclude<span class=\"token punctuation\">:</span> defaultLoaders<span class=\"token punctuation\">.</span>jsLoader<span class=\"token punctuation\">.</span>exclude<span class=\"token punctuation\">,</span> <span class=\"token comment\">// as std jsLoader exclude</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span> loader<span class=\"token punctuation\">:</span> <span class=\"token string\">'babel-loader'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n          loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ts-loader'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> transpileOnly<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> config\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre><p>現在はこのような設定になっている。<br>あまり気に入った方法ではないが、しばらくはこれで様子を見ることにする。</p>\n"
    },
    "prev": {
      "title": "【書き途中】ブログをHyperappベースの自作ジェネレータに変更した話",
      "slug": "use-hyperapp"
    },
    "next": {
      "title": "GitHub PagesのUser Pageにdistフォルダをデプロイする",
      "slug": "deploy-to-github-pages-user-page"
    }
  }
}